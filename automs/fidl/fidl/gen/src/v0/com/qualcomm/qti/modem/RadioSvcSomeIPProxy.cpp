/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/com/qualcomm/qti/modem/RadioSvcSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createRadioSvcSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< RadioSvcSomeIPProxy>(_address, _connection);
}

void initializeRadioSvcSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.qualcomm.qti.modem.RadioSvc:v0_1:modem.RadioSvc",
        0xed80, 0x1, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "com.qualcomm.qti.modem.RadioSvc:v0_1",
        &createRadioSvcSomeIPProxy);
}

INITIALIZER(registerRadioSvcSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeRadioSvcSomeIPProxy);
}

RadioSvcSomeIPProxy::RadioSvcSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          signalStrength_(*this, 0x80f2, CommonAPI::SomeIP::event_id_t(0x80f2), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr))),
          radioRat_(*this, 0x80fc, CommonAPI::SomeIP::event_id_t(0x80fc), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr))),
          radioState_(*this, 0x8106, CommonAPI::SomeIP::event_id_t(0x8106), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::StatesDeployment_t* >(nullptr))),
          cellInfo_(*this, 0x8110, CommonAPI::SomeIP::event_id_t(0x8110), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::CellInfoStatusDeployment_t* >(nullptr)))
{
}

RadioSvcSomeIPProxy::~RadioSvcSomeIPProxy() {
    completed_.set_value();
}


RadioSvcSomeIPProxy::SignalStrengthEvent& RadioSvcSomeIPProxy::getSignalStrengthEvent() {
    return signalStrength_;
}
RadioSvcSomeIPProxy::RadioRatEvent& RadioSvcSomeIPProxy::getRadioRatEvent() {
    return radioRat_;
}
RadioSvcSomeIPProxy::RadioStateEvent& RadioSvcSomeIPProxy::getRadioStateEvent() {
    return radioState_;
}
RadioSvcSomeIPProxy::CellInfoEvent& RadioSvcSomeIPProxy::getCellInfoEvent() {
    return cellInfo_;
}

/*
 * description: 
 * Set power state of the Radio
 */
void RadioSvcSomeIPProxy::SetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t> deploy_power(_power, &::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x753a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_power,
        _internalCallStatus,
        deploy_error);
    _error = deploy_error.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::SetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, SetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t> deploy_power(_power, &::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x753a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_power,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
}

/*
 * description: 
 * Get power state of the Radio
 */
void RadioSvcSomeIPProxy::GetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t> deploy_power(&::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7544),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_power);
    _error = deploy_error.getValue();
    _power = deploy_power.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t> deploy_power(&::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7544),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t > _power) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _power.getValue());
        },
        std::make_tuple(deploy_error, deploy_power));
}

/*
 * description: 
 * Get signal strength of the Radio
 */
void RadioSvcSomeIPProxy::GetSignalStrength(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::SignalMetrics &_signalStrength, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deploy_rat(_rat, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SignalMetrics, ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t> deploy_signalStrength(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::Rat,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SignalMetrics,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x754e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_rat,
        _internalCallStatus,
        deploy_error,
        deploy_signalStrength);
    _error = deploy_error.getValue();
    _signalStrength = deploy_signalStrength.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetSignalStrengthAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::Rat &_rat, GetSignalStrengthAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deploy_rat(_rat, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SignalMetrics, ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t> deploy_signalStrength(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::Rat,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SignalMetrics,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x754e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_rat,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< RadioSvc::SignalMetrics, ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t > _signalStrength) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _signalStrength.getValue());
        },
        std::make_tuple(deploy_error, deploy_signalStrength));
}

/*
 * description: 
 * Get the network registration mode
 */
void RadioSvcSomeIPProxy::GetRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, bool &_isManual, std::string &_mcc, std::string &_mnc, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_isManual(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mcc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mnc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7558),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_isManual, deploy_mcc, deploy_mnc);
    _error = deploy_error.getValue();
    _isManual = deploy_isManual.getValue();
    _mcc = deploy_mcc.getValue();
    _mnc = deploy_mnc.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_isManual(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mcc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mnc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7558),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _isManual, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _mcc, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _mnc) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _isManual.getValue(), _mcc.getValue(), _mnc.getValue());
        },
        std::make_tuple(deploy_error, deploy_isManual, deploy_mcc, deploy_mnc));
}

/*
 * description: 
 * Registers to network using automatic mode
 */
void RadioSvcSomeIPProxy::SetAutomaticRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7562),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error);
    _error = deploy_error.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::SetAutomaticRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, SetAutomaticRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7562),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
}

/*
 * description: 
 * Gets SIM maximum counts and RAT capabilities
 */
void RadioSvcSomeIPProxy::GetHardwareConfig(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, uint8_t &_totalSimCount, uint8_t &_maxActiveSims, RadioSvc::RatBitMask &_deviceRatCapMask, RadioSvc::RatBitMask &_simRatCapMask, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_totalSimCount(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_maxActiveSims(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_deviceRatCapMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_simRatCapMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >,
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x756c),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_totalSimCount, deploy_maxActiveSims, deploy_deviceRatCapMask, deploy_simRatCapMask);
    _error = deploy_error.getValue();
    _totalSimCount = deploy_totalSimCount.getValue();
    _maxActiveSims = deploy_maxActiveSims.getValue();
    _deviceRatCapMask = deploy_deviceRatCapMask.getValue();
    _simRatCapMask = deploy_simRatCapMask.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetHardwareConfigAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetHardwareConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_totalSimCount(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_maxActiveSims(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_deviceRatCapMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_simRatCapMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >,
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x756c),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _totalSimCount, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _maxActiveSims, CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _deviceRatCapMask, CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _simRatCapMask) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _totalSimCount.getValue(), _maxActiveSims.getValue(), _deviceRatCapMask.getValue(), _simRatCapMask.getValue());
        },
        std::make_tuple(deploy_error, deploy_totalSimCount, deploy_maxActiveSims, deploy_deviceRatCapMask, deploy_simRatCapMask));
}

/*
 * description: 
 * Gets the RAT preferences
 */
void RadioSvcSomeIPProxy::GetRatPreferences(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::RatBitMask &_ratMask, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_ratMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7576),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_ratMask);
    _error = deploy_error.getValue();
    _ratMask = deploy_ratMask.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetRatPreferencesAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRatPreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_ratMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::RatBitMask,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7576),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< RadioSvc::RatBitMask, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _ratMask) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _ratMask.getValue());
        },
        std::make_tuple(deploy_error, deploy_ratMask));
}

/*
 * description: 
 * Gets the long name and short name of the network
 */
void RadioSvcSomeIPProxy::GetCurrentNetworkName(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_longName, std::string &_shortName, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_longName(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_shortName(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7580),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_longName, deploy_shortName);
    _error = deploy_error.getValue();
    _longName = deploy_longName.getValue();
    _shortName = deploy_shortName.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetCurrentNetworkNameAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetCurrentNetworkNameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_longName(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_shortName(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7580),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _longName, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _shortName) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _longName.getValue(), _shortName.getValue());
        },
        std::make_tuple(deploy_error, deploy_longName, deploy_shortName));
}

/*
 * description: 
 * Gets the current registration state
 */
void RadioSvcSomeIPProxy::GetNetRegState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::Rat &_rat, uint32_t &_cellId, std::string &_mcc, std::string &_mnc, RadioSvc::NetRegState &_netReg, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deploy_rat(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_cellId(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mcc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mnc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< RadioSvc::NetRegState, ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t> deploy_netReg(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::Rat,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                RadioSvc::NetRegState,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x758a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_rat, deploy_cellId, deploy_mcc, deploy_mnc, deploy_netReg);
    _error = deploy_error.getValue();
    _rat = deploy_rat.getValue();
    _cellId = deploy_cellId.getValue();
    _mcc = deploy_mcc.getValue();
    _mnc = deploy_mnc.getValue();
    _netReg = deploy_netReg.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetNetRegStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNetRegStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deploy_rat(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_cellId(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mcc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_mnc(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< RadioSvc::NetRegState, ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t> deploy_netReg(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::Rat,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                RadioSvc::NetRegState,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x758a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t > _rat, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _cellId, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _mcc, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _mnc, CommonAPI::Deployable< RadioSvc::NetRegState, ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t > _netReg) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _rat.getValue(), _cellId.getValue(), _mcc.getValue(), _mnc.getValue(), _netReg.getValue());
        },
        std::make_tuple(deploy_error, deploy_rat, deploy_cellId, deploy_mcc, deploy_mnc, deploy_netReg));
}

/*
 * description: 
 * Gets the DCNR and ENDC mode status
 */
void RadioSvcSomeIPProxy::GetNrDualConnectivityStatus(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::NRDcnrRestriction &_statusDcnr, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::NRDcnrRestriction, ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t> deploy_statusDcnr(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::NRDcnrRestriction,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7594),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_statusDcnr);
    _error = deploy_error.getValue();
    _statusDcnr = deploy_statusDcnr.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::GetNrDualConnectivityStatusAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNrDualConnectivityStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::NRDcnrRestriction, ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t> deploy_statusDcnr(static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::NRDcnrRestriction,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7594),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< RadioSvc::NRDcnrRestriction, ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t > _statusDcnr) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _statusDcnr.getValue());
        },
        std::make_tuple(deploy_error, deploy_statusDcnr));
}

/*
 * description: 
 * Sets signal reporting criteria.
 */
void RadioSvcSomeIPProxy::SetSignalStrengthReportingCriteria(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::SigType, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t> deploy_sigType(_sigType, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SigStrengthIndication, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t> deploy_ind(_ind, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SigStrengthHysteresis, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t> deploy_hyst(_hyst, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigType,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigStrengthIndication,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigStrengthHysteresis,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x759e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_sigType, deploy_ind, deploy_hyst,
        _internalCallStatus,
        deploy_error);
    _error = deploy_error.getValue();
}

std::future<CommonAPI::CallStatus> RadioSvcSomeIPProxy::SetSignalStrengthReportingCriteriaAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::SigType &_sigType, const RadioSvc::SigStrengthIndication &_ind, const RadioSvc::SigStrengthHysteresis &_hyst, SetSignalStrengthReportingCriteriaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::SigType, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t> deploy_sigType(_sigType, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SigStrengthIndication, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t> deploy_ind(_ind, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t* >(nullptr));
    CommonAPI::Deployable< RadioSvc::SigStrengthHysteresis, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t> deploy_hyst(_hyst, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigType,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigStrengthIndication,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t
            >,
            CommonAPI::Deployable<
                RadioSvc::SigStrengthHysteresis,
                ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x759e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId, deploy_sigType, deploy_ind, deploy_hyst,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue());
        },
        std::make_tuple(deploy_error));
}

void RadioSvcSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> RadioSvcSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0
