/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COM_QUALCOMM_QTI_MODEM_SIM_SVC_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_SIM_SVC_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/com/qualcomm/qti/modem/SimSvcStub.hpp>
#include <v0/com/qualcomm/qti/modem/CommonTypesSomeIPDeployment.hpp>
#include <v0/com/qualcomm/qti/modem/SimSvcSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

template <typename _Stub = ::v0::com::qualcomm::qti::modem::SimSvcStub, typename... _Stubs>
class SimSvcSomeIPStubAdapterInternal
    : public virtual SimSvcStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> SimSvcSomeIPStubAdapterHelper;

    ~SimSvcSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        SimSvcSomeIPStubAdapterHelper::deinit();
    }

    /*
     * description: 
     * SIM card state change event
     */
    void fireSimStateEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::SimSvc::States &_simState);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::com::qualcomm::qti::modem::SimSvcStub,
        CommonAPI::Version
    > getSimSvcInterfaceVersionStubDispatcher;

    /*
     * description: 
     * Retrieves the IMSI for the SIM
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::SimSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, std::string>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::SomeIP::StringDeployment>
    > getImsiStubDispatcher;
    
    /*
     * description: 
     * Gets the state of the SIM card
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::SimSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, SimSvc::States>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t>
    > getStateStubDispatcher;
    
    /*
     * description: 
     * Retrieves the SIM's ICCID
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::SimSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, std::string>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::SomeIP::StringDeployment>
    > getICCIDStubDispatcher;
    
    SimSvcSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        SimSvcSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< SimSvcStub>(_stub)),
        getSimSvcInterfaceVersionStubDispatcher(&SimSvcStub::lockInterfaceVersionAttribute, &SimSvcStub::getInterfaceVersion, false, true),
        getImsiStubDispatcher(
            &SimSvcStub::GetImsi,
            false,
            _stub->hasElement(0),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        getStateStubDispatcher(
            &SimSvcStub::GetState,
            false,
            _stub->hasElement(1),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, &::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment))
        
        ,
        getICCIDStubDispatcher(
            &SimSvcStub::GetICCID,
            false,
            _stub->hasElement(2),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
    {
        /*
         * description: 
         * Retrieves the IMSI for the SIM
         */
        SimSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x753a) }, &getImsiStubDispatcher );
        /*
         * description: 
         * Gets the state of the SIM card
         */
        SimSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7544) }, &getStateStubDispatcher );
        /*
         * description: 
         * Retrieves the SIM's ICCID
         */
        SimSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x754e) }, &getICCIDStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x80f2));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f2), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

/*
 * description: 
 * SIM card state change event
 */
template <typename _Stub, typename... _Stubs>
void SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSimStateEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::SimSvc::States &_simState) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deployed_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< SimSvc::States, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t> deployed_simState(_simState, &::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t > 
    ,  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::SimSvc::States, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x80f2),
            false,
             deployed_phoneId 
            ,  deployed_simState 
    );
}


template <typename _Stub, typename... _Stubs>
void SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v0::com::qualcomm::qti::modem::SimSvcStub, typename... _Stubs>
class SimSvcSomeIPStubAdapter
    : public SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    SimSvcSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          SimSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0

#endif // V0_COM_QUALCOMM_QTI_MODEM_Sim_Svc_SOMEIP_STUB_ADAPTER_HPP_
