/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/com/qualcomm/qti/modem/SimSvcSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createSimSvcSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< SimSvcSomeIPProxy>(_address, _connection);
}

void initializeSimSvcSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.qualcomm.qti.modem.SimSvc:v0_1:modem.SimSvc",
        0xed81, 0x1, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "com.qualcomm.qti.modem.SimSvc:v0_1",
        &createSimSvcSomeIPProxy);
}

INITIALIZER(registerSimSvcSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeSimSvcSomeIPProxy);
}

SimSvcSomeIPProxy::SimSvcSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          simState_(*this, 0x80f2, CommonAPI::SomeIP::event_id_t(0x80f2), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, &::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment))
{
}

SimSvcSomeIPProxy::~SimSvcSomeIPProxy() {
    completed_.set_value();
}


SimSvcSomeIPProxy::SimStateEvent& SimSvcSomeIPProxy::getSimStateEvent() {
    return simState_;
}

/*
 * description: 
 * Retrieves the IMSI for the SIM
 */
void SimSvcSomeIPProxy::GetImsi(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_imsi, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_imsi(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x753a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_imsi);
    _error = deploy_error.getValue();
    _imsi = deploy_imsi.getValue();
}

std::future<CommonAPI::CallStatus> SimSvcSomeIPProxy::GetImsiAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetImsiAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_imsi(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x753a),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _imsi) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _imsi.getValue());
        },
        std::make_tuple(deploy_error, deploy_imsi));
}

/*
 * description: 
 * Gets the state of the SIM card
 */
void SimSvcSomeIPProxy::GetState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, SimSvc::States &_simState, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< SimSvc::States, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t> deploy_simState(&::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                SimSvc::States,
                ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7544),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_simState);
    _error = deploy_error.getValue();
    _simState = deploy_simState.getValue();
}

std::future<CommonAPI::CallStatus> SimSvcSomeIPProxy::GetStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< SimSvc::States, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t> deploy_simState(&::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                SimSvc::States,
                ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7544),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< SimSvc::States, ::v0::com::qualcomm::qti::modem::SimSvc_::StatesDeployment_t > _simState) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _simState.getValue());
        },
        std::make_tuple(deploy_error, deploy_simState));
}

/*
 * description: 
 * Retrieves the SIM's ICCID
 */
void SimSvcSomeIPProxy::GetICCID(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_iccid, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_iccid(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x754e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        _internalCallStatus,
        deploy_error,
        deploy_iccid);
    _error = deploy_error.getValue();
    _iccid = deploy_iccid.getValue();
}

std::future<CommonAPI::CallStatus> SimSvcSomeIPProxy::GetICCIDAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetICCIDAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t> deploy_error(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment);
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deploy_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_iccid(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::com::qualcomm::qti::modem::CommonTypes::Result,
                ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x754e),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_phoneId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t > _deploy_error, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _iccid) {
            if (_callback)
                _callback(_internalCallStatus, _deploy_error.getValue(), _iccid.getValue());
        },
        std::make_tuple(deploy_error, deploy_iccid));
}

void SimSvcSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> SimSvcSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0
