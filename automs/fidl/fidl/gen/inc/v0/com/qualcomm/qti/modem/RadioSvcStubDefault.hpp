/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_DEFAULT_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/com/qualcomm/qti/modem/RadioSvcStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

/**
 * Provides a default implementation for RadioSvcStubRemoteEvent and
 * RadioSvcStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT RadioSvcStubDefault
    : public virtual RadioSvcStub {
public:
    COMMONAPI_EXPORT RadioSvcStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(RadioSvc::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT RadioSvcStubRemoteEvent* initStubAdapter(const std::shared_ptr< RadioSvcStubAdapter> &_adapter) {
        CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    /*
     * description: 
     * Set power state of the Radio
     */
    COMMONAPI_EXPORT virtual void SetRadioPower(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, SetRadioPowerReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        (void)_power;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _reply(error);
    }
    /*
     * description: 
     * Get power state of the Radio
     */
    COMMONAPI_EXPORT virtual void GetRadioPower(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRadioPowerReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType power = ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType::OFF;
        if (!power.validate()) {
            return;
        }
        _reply(error, power);
    }
    /*
     * description: 
     * Get signal strength of the Radio
     */
    COMMONAPI_EXPORT virtual void GetSignalStrength(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, GetSignalStrengthReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        (void)_rat;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::SignalMetrics signalStrength = {};
        _reply(error, signalStrength);
    }
    /*
     * description: 
     * Get the network registration mode
     */
    COMMONAPI_EXPORT virtual void GetRegisterMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRegisterModeReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        bool isManual = false;
        std::string mcc = "";
        std::string mnc = "";
        _reply(error, isManual, mcc, mnc);
    }
    /*
     * description: 
     * Registers to network using automatic mode
     */
    COMMONAPI_EXPORT virtual void SetAutomaticRegisterMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, SetAutomaticRegisterModeReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _reply(error);
    }
    /*
     * description: 
     * Gets SIM maximum counts and RAT capabilities
     */
    COMMONAPI_EXPORT virtual void GetHardwareConfig(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetHardwareConfigReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        uint8_t totalSimCount = 0u;
        uint8_t maxActiveSims = 0u;
        RadioSvc::RatBitMask deviceRatCapMask = 0ul;
        RadioSvc::RatBitMask simRatCapMask = 0ul;
        _reply(error, totalSimCount, maxActiveSims, deviceRatCapMask, simRatCapMask);
    }
    /*
     * description: 
     * Gets the RAT preferences
     */
    COMMONAPI_EXPORT virtual void GetRatPreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRatPreferencesReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::RatBitMask ratMask = 0ul;
        _reply(error, ratMask);
    }
    /*
     * description: 
     * Gets the long name and short name of the network
     */
    COMMONAPI_EXPORT virtual void GetCurrentNetworkName(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetCurrentNetworkNameReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        std::string longName = "";
        std::string shortName = "";
        _reply(error, longName, shortName);
    }
    /*
     * description: 
     * Gets the current registration state
     */
    COMMONAPI_EXPORT virtual void GetNetRegState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetNetRegStateReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::Rat rat = RadioSvc::Rat::RAT_UNKNOWN;
        uint32_t cellId = 0ul;
        std::string mcc = "";
        std::string mnc = "";
        RadioSvc::NetRegState netReg = RadioSvc::NetRegState::NET_REG_STATE_NONE;
        if (!rat.validate()) {
            return;
        }
        if (!netReg.validate()) {
            return;
        }
        _reply(error, rat, cellId, mcc, mnc, netReg);
    }
    /*
     * description: 
     * Gets the DCNR and ENDC mode status
     */
    COMMONAPI_EXPORT virtual void GetNrDualConnectivityStatus(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetNrDualConnectivityStatusReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::NRDcnrRestriction statusDcnr = RadioSvc::NRDcnrRestriction::NR_DCNR_UNKNOWN;
        if (!statusDcnr.validate()) {
            return;
        }
        _reply(error, statusDcnr);
    }
    /*
     * description: 
     * Sets signal reporting criteria.
     */
    COMMONAPI_EXPORT virtual void SetSignalStrengthReportingCriteria(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, SetSignalStrengthReportingCriteriaReply_t _reply) {
        (void)_client;
        (void)_phoneId;
        (void)_sigType;
        (void)_ind;
        (void)_hyst;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _reply(error);
    }
    /*
     * description: 
     * Event to report signal strength change
     */
    COMMONAPI_EXPORT virtual void fireSignalStrengthEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat, const int32_t &_ss, const int32_t &_rsrp) {
        if (!_phoneId.validate()) {
            return;
        }
        if (!_rat.validate()) {
            return;
        }
        RadioSvcStub::fireSignalStrengthEvent(_phoneId, _rat, _ss, _rsrp);
    }
    /*
     * description: 
     * Event to report RAT change
     */
    COMMONAPI_EXPORT virtual void fireRadioRatEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat) {
        if (!_phoneId.validate()) {
            return;
        }
        if (!_rat.validate()) {
            return;
        }
        RadioSvcStub::fireRadioRatEvent(_phoneId, _rat);
    }
    /*
     * description: 
     * Event to radio state change
     */
    COMMONAPI_EXPORT virtual void fireRadioStateEvent(const ::v0::com::qualcomm::qti::modem::RadioSvc::States &_radioState) {
        if (!_radioState.validate()) {
            return;
        }
        RadioSvcStub::fireRadioStateEvent(_radioState);
    }
    /*
     * description: 
     * Event to report cell info change
     */
    COMMONAPI_EXPORT virtual void fireCellInfoEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus &_status) {
        if (!_phoneId.validate()) {
            return;
        }
        if (!_status.validate()) {
            return;
        }
        RadioSvcStub::fireCellInfoEvent(_phoneId, _status);
    }


protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual RadioSvcStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(RadioSvcStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }


    private:
        RadioSvcStubDefault *defaultStub_;
    };
protected:
    RadioSvcStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_DEFAULT
