/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_PROXY_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_PROXY_HPP_

#include <v0/com/qualcomm/qti/modem/RadioSvcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

template <typename ... _AttributeExtensions>
class RadioSvcProxy
    : virtual public RadioSvc,
      virtual public RadioSvcProxyBase,
      virtual public _AttributeExtensions... {
public:
    RadioSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~RadioSvcProxy();

    typedef RadioSvc InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * description: 
     * Set power state of the Radio
     * Calls SetRadioPower with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetRadioPower with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, SetRadioPowerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Get power state of the Radio
     * Calls GetRadioPower with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetRadioPower with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRadioPowerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Get signal strength of the Radio
     * Calls GetSignalStrength with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetSignalStrength(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::SignalMetrics &_signalStrength, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetSignalStrength with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetSignalStrengthAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::Rat &_rat, GetSignalStrengthAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Get the network registration mode
     * Calls GetRegisterMode with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, bool &_isManual, std::string &_mcc, std::string &_mnc, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetRegisterMode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRegisterModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Registers to network using automatic mode
     * Calls SetAutomaticRegisterMode with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetAutomaticRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetAutomaticRegisterMode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetAutomaticRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, SetAutomaticRegisterModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets SIM maximum counts and RAT capabilities
     * Calls GetHardwareConfig with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetHardwareConfig(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, uint8_t &_totalSimCount, uint8_t &_maxActiveSims, RadioSvc::RatBitMask &_deviceRatCapMask, RadioSvc::RatBitMask &_simRatCapMask, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetHardwareConfig with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetHardwareConfigAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetHardwareConfigAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets the RAT preferences
     * Calls GetRatPreferences with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetRatPreferences(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::RatBitMask &_ratMask, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetRatPreferences with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetRatPreferencesAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRatPreferencesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets the long name and short name of the network
     * Calls GetCurrentNetworkName with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetCurrentNetworkName(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_longName, std::string &_shortName, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetCurrentNetworkName with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetCurrentNetworkNameAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetCurrentNetworkNameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets the current registration state
     * Calls GetNetRegState with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetNetRegState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::Rat &_rat, uint32_t &_cellId, std::string &_mcc, std::string &_mnc, RadioSvc::NetRegState &_netReg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetNetRegState with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetNetRegStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNetRegStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets the DCNR and ENDC mode status
     * Calls GetNrDualConnectivityStatus with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetNrDualConnectivityStatus(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::NRDcnrRestriction &_statusDcnr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetNrDualConnectivityStatus with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetNrDualConnectivityStatusAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNrDualConnectivityStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Sets signal reporting criteria.
     * Calls SetSignalStrengthReportingCriteria with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetSignalStrengthReportingCriteria(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetSignalStrengthReportingCriteria with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetSignalStrengthReportingCriteriaAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::SigType &_sigType, const RadioSvc::SigStrengthIndication &_ind, const RadioSvc::SigStrengthHysteresis &_hyst, SetSignalStrengthReportingCriteriaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /*
     * description: 
     * Event to report signal strength change
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SignalStrength.
     */
    virtual SignalStrengthEvent& getSignalStrengthEvent() {
        return delegate_->getSignalStrengthEvent();
    }
    /*
     * description: 
     * Event to report RAT change
     */
    /**
     * Returns the wrapper class that provides access to the broadcast RadioRat.
     */
    virtual RadioRatEvent& getRadioRatEvent() {
        return delegate_->getRadioRatEvent();
    }
    /*
     * description: 
     * Event to radio state change
     */
    /**
     * Returns the wrapper class that provides access to the broadcast RadioState.
     */
    virtual RadioStateEvent& getRadioStateEvent() {
        return delegate_->getRadioStateEvent();
    }
    /*
     * description: 
     * Event to report cell info change
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CellInfo.
     */
    virtual CellInfoEvent& getCellInfoEvent() {
        return delegate_->getCellInfoEvent();
    }



 private:
    std::shared_ptr< RadioSvcProxyBase> delegate_;
};

typedef RadioSvcProxy<> RadioSvcProxyDefault;


//
// RadioSvcProxy Implementation
//
template <typename ... _AttributeExtensions>
RadioSvcProxy<_AttributeExtensions...>::RadioSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< RadioSvcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< RadioSvcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
RadioSvcProxy<_AttributeExtensions...>::~RadioSvcProxy() {
}

/*
 * description: 
 * Set power state of the Radio
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::SetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_power.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetRadioPower(_phoneId, _power, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::SetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, SetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_power.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetRadioPowerAsync(_phoneId, _power, _callback, _info);
}
/*
 * description: 
 * Get power state of the Radio
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetRadioPower(_phoneId, _internalCallStatus, _error, _power, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType power = ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType::OFF;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, power);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetRadioPowerAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Get signal strength of the Radio
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetSignalStrength(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::SignalMetrics &_signalStrength, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_rat.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetSignalStrength(_phoneId, _rat, _internalCallStatus, _error, _signalStrength, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetSignalStrengthAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::Rat &_rat, GetSignalStrengthAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::SignalMetrics signalStrength = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, signalStrength);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_rat.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::SignalMetrics signalStrength = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, signalStrength);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetSignalStrengthAsync(_phoneId, _rat, _callback, _info);
}
/*
 * description: 
 * Get the network registration mode
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, bool &_isManual, std::string &_mcc, std::string &_mnc, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetRegisterMode(_phoneId, _internalCallStatus, _error, _isManual, _mcc, _mnc, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        bool isManual = false;
        std::string mcc = "";
        std::string mnc = "";
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, isManual, mcc, mnc);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetRegisterModeAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Registers to network using automatic mode
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::SetAutomaticRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetAutomaticRegisterMode(_phoneId, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::SetAutomaticRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, SetAutomaticRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetAutomaticRegisterModeAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets SIM maximum counts and RAT capabilities
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetHardwareConfig(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, uint8_t &_totalSimCount, uint8_t &_maxActiveSims, RadioSvc::RatBitMask &_deviceRatCapMask, RadioSvc::RatBitMask &_simRatCapMask, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetHardwareConfig(_phoneId, _internalCallStatus, _error, _totalSimCount, _maxActiveSims, _deviceRatCapMask, _simRatCapMask, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetHardwareConfigAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetHardwareConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        uint8_t totalSimCount = 0u;
        uint8_t maxActiveSims = 0u;
        RadioSvc::RatBitMask deviceRatCapMask = 0ul;
        RadioSvc::RatBitMask simRatCapMask = 0ul;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, totalSimCount, maxActiveSims, deviceRatCapMask, simRatCapMask);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetHardwareConfigAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets the RAT preferences
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetRatPreferences(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::RatBitMask &_ratMask, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetRatPreferences(_phoneId, _internalCallStatus, _error, _ratMask, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetRatPreferencesAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRatPreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::RatBitMask ratMask = 0ul;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, ratMask);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetRatPreferencesAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets the long name and short name of the network
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetCurrentNetworkName(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_longName, std::string &_shortName, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetCurrentNetworkName(_phoneId, _internalCallStatus, _error, _longName, _shortName, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetCurrentNetworkNameAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetCurrentNetworkNameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        std::string longName = "";
        std::string shortName = "";
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, longName, shortName);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetCurrentNetworkNameAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets the current registration state
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetNetRegState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::Rat &_rat, uint32_t &_cellId, std::string &_mcc, std::string &_mnc, RadioSvc::NetRegState &_netReg, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetNetRegState(_phoneId, _internalCallStatus, _error, _rat, _cellId, _mcc, _mnc, _netReg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetNetRegStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNetRegStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::Rat rat = RadioSvc::Rat::RAT_UNKNOWN;
        uint32_t cellId = 0ul;
        std::string mcc = "";
        std::string mnc = "";
        RadioSvc::NetRegState netReg = RadioSvc::NetRegState::NET_REG_STATE_NONE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, rat, cellId, mcc, mnc, netReg);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetNetRegStateAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets the DCNR and ENDC mode status
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::GetNrDualConnectivityStatus(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::NRDcnrRestriction &_statusDcnr, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetNrDualConnectivityStatus(_phoneId, _internalCallStatus, _error, _statusDcnr, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::GetNrDualConnectivityStatusAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNrDualConnectivityStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        RadioSvc::NRDcnrRestriction statusDcnr = RadioSvc::NRDcnrRestriction::NR_DCNR_UNKNOWN;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, statusDcnr);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetNrDualConnectivityStatusAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Sets signal reporting criteria.
 */
template <typename ... _AttributeExtensions>
void RadioSvcProxy<_AttributeExtensions...>::SetSignalStrengthReportingCriteria(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_sigType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetSignalStrengthReportingCriteria(_phoneId, _sigType, _ind, _hyst, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> RadioSvcProxy<_AttributeExtensions...>::SetSignalStrengthReportingCriteriaAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::SigType &_sigType, const RadioSvc::SigStrengthIndication &_ind, const RadioSvc::SigStrengthHysteresis &_hyst, SetSignalStrengthReportingCriteriaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_sigType.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetSignalStrengthReportingCriteriaAsync(_phoneId, _sigType, _ind, _hyst, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &RadioSvcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool RadioSvcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool RadioSvcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& RadioSvcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& RadioSvcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> RadioSvcProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_PROXY_HPP_
