/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COM_QUALCOMM_QTI_MODEM_RADIO_SVC_SOMEIP_PROXY_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_RADIO_SVC_SOMEIP_PROXY_HPP_

#include <v0/com/qualcomm/qti/modem/RadioSvcProxyBase.hpp>
#include <v0/com/qualcomm/qti/modem/RadioSvcSomeIPDeployment.hpp>
#include <v0/com/qualcomm/qti/modem/CommonTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

class RadioSvcSomeIPProxy
    : virtual public RadioSvcProxyBase,
      virtual public CommonAPI::SomeIP::Proxy {
public:
    RadioSvcSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~RadioSvcSomeIPProxy();

    virtual SignalStrengthEvent& getSignalStrengthEvent();

    virtual RadioRatEvent& getRadioRatEvent();

    virtual RadioStateEvent& getRadioStateEvent();

    virtual CellInfoEvent& getCellInfoEvent();

    virtual void SetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> SetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, SetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetRadioPower(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType &_power, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetRadioPowerAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRadioPowerAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    /*
     * description: 
     * Get signal strength of the Radio
     */
    virtual void GetSignalStrength(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::SignalMetrics &_signalStrength, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetSignalStrengthAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::Rat &_rat, GetSignalStrengthAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, bool &_isManual, std::string &_mcc, std::string &_mnc, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void SetAutomaticRegisterMode(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> SetAutomaticRegisterModeAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, SetAutomaticRegisterModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetHardwareConfig(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, uint8_t &_totalSimCount, uint8_t &_maxActiveSims, RadioSvc::RatBitMask &_deviceRatCapMask, RadioSvc::RatBitMask &_simRatCapMask, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetHardwareConfigAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetHardwareConfigAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetRatPreferences(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::RatBitMask &_ratMask, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetRatPreferencesAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetRatPreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetCurrentNetworkName(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_longName, std::string &_shortName, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetCurrentNetworkNameAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetCurrentNetworkNameAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetNetRegState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::Rat &_rat, uint32_t &_cellId, std::string &_mcc, std::string &_mnc, RadioSvc::NetRegState &_netReg, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetNetRegStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNetRegStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetNrDualConnectivityStatus(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::NRDcnrRestriction &_statusDcnr, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetNrDualConnectivityStatusAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetNrDualConnectivityStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void SetSignalStrengthReportingCriteria(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> SetSignalStrengthReportingCriteriaAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const RadioSvc::SigType &_sigType, const RadioSvc::SigStrengthIndication &_ind, const RadioSvc::SigStrengthHysteresis &_hyst, SetSignalStrengthReportingCriteriaAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetPacketSwitchedState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, RadioSvc::NetRegState &_netState, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetPacketSwitchedStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetPacketSwitchedStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

    virtual std::future<void> getCompletionFuture();

private:
    CommonAPI::SomeIP::Event<SignalStrengthEvent, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t >, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t >, CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> >, CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> >> signalStrength_;
    CommonAPI::SomeIP::Event<RadioRatEvent, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t >, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t >> radioRat_;
    CommonAPI::SomeIP::Event<RadioStateEvent, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::States, ::v0::com::qualcomm::qti::modem::RadioSvc_::StatesDeployment_t >> radioState_;
    CommonAPI::SomeIP::Event<CellInfoEvent, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t >, CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus, ::v0::com::qualcomm::qti::modem::RadioSvc_::CellInfoStatusDeployment_t >> cellInfo_;

    std::promise<void> completed_;
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0

#endif // V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_SOMEIP_PROXY_HPP_
