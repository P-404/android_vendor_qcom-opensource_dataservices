/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_Sim_Svc_PROXY_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_Sim_Svc_PROXY_HPP_

#include <v0/com/qualcomm/qti/modem/SimSvcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

template <typename ... _AttributeExtensions>
class SimSvcProxy
    : virtual public SimSvc,
      virtual public SimSvcProxyBase,
      virtual public _AttributeExtensions... {
public:
    SimSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SimSvcProxy();

    typedef SimSvc InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls GetImsi with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetImsi(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_imsi, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetImsi with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetImsiAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetImsiAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Gets the state of the SIM card
     * Calls GetState with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, SimSvc::States &_simState, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetState with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetICCID with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetICCID(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_iccid, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetICCID with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetICCIDAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetICCIDAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Returns the wrapper class that provides access to the broadcast SimState.
     */
    virtual SimStateEvent& getSimStateEvent() {
        return delegate_->getSimStateEvent();
    }



 private:
    std::shared_ptr< SimSvcProxyBase> delegate_;
};

typedef SimSvcProxy<> SimSvcProxyDefault;


//
// SimSvcProxy Implementation
//
template <typename ... _AttributeExtensions>
SimSvcProxy<_AttributeExtensions...>::SimSvcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< SimSvcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< SimSvcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SimSvcProxy<_AttributeExtensions...>::~SimSvcProxy() {
}

template <typename ... _AttributeExtensions>
void SimSvcProxy<_AttributeExtensions...>::GetImsi(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_imsi, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetImsi(_phoneId, _internalCallStatus, _error, _imsi, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimSvcProxy<_AttributeExtensions...>::GetImsiAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetImsiAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        std::string imsi = "";
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, imsi);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetImsiAsync(_phoneId, _callback, _info);
}
/*
 * description: 
 * Gets the state of the SIM card
 */
template <typename ... _AttributeExtensions>
void SimSvcProxy<_AttributeExtensions...>::GetState(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, SimSvc::States &_simState, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetState(_phoneId, _internalCallStatus, _error, _simState, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimSvcProxy<_AttributeExtensions...>::GetStateAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        SimSvc::States simState = SimSvc::States::PRESENT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, simState);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetStateAsync(_phoneId, _callback, _info);
}
template <typename ... _AttributeExtensions>
void SimSvcProxy<_AttributeExtensions...>::GetICCID(::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::qualcomm::qti::modem::CommonTypes::Result &_error, std::string &_iccid, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->GetICCID(_phoneId, _internalCallStatus, _error, _iccid, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimSvcProxy<_AttributeExtensions...>::GetICCIDAsync(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, GetICCIDAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_phoneId.validate()) {
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        std::string iccid = "";
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error, iccid);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->GetICCIDAsync(_phoneId, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SimSvcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SimSvcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SimSvcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SimSvcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SimSvcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> SimSvcProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_Sim_Svc_PROXY_HPP_
