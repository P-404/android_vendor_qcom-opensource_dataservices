/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COM_QUALCOMM_QTI_MODEM_RADIO_SVC_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_RADIO_SVC_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/com/qualcomm/qti/modem/RadioSvcStub.hpp>
#include <v0/com/qualcomm/qti/modem/RadioSvcSomeIPDeployment.hpp>
#include <v0/com/qualcomm/qti/modem/CommonTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

template <typename _Stub = ::v0::com::qualcomm::qti::modem::RadioSvcStub, typename... _Stubs>
class RadioSvcSomeIPStubAdapterInternal
    : public virtual RadioSvcStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> RadioSvcSomeIPStubAdapterHelper;

    ~RadioSvcSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        RadioSvcSomeIPStubAdapterHelper::deinit();
    }

    void fireSignalStrengthEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat, const int32_t &_ss, const int32_t &_rsrp);

    void fireRadioRatEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat);

    void fireRadioStateEvent(const ::v0::com::qualcomm::qti::modem::RadioSvc::States &_radioState);

    void fireCellInfoEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus &_status);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        CommonAPI::Version
    > getRadioSvcInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t>
    > setRadioPowerStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment_t>
    > getRadioPowerStubDispatcher;
    
    /*
     * description: 
     * Get signal strength of the Radio
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, RadioSvc::Rat>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, RadioSvc::SignalMetrics>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t>
    > getSignalStrengthStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, bool, std::string, std::string>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::EmptyDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>
    > getRegisterModeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t>
    > setAutomaticRegisterModeStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, uint8_t, uint8_t, RadioSvc::RatBitMask, RadioSvc::RatBitMask>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
    > getHardwareConfigStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, RadioSvc::RatBitMask>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
    > getRatPreferencesStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, std::string, std::string>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>
    > getCurrentNetworkNameStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, RadioSvc::Rat, uint32_t, std::string, std::string, RadioSvc::NetRegState>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t>
    > getNetRegStateStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, RadioSvc::NRDcnrRestriction>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t>
    > getNrDualConnectivityStatusStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, RadioSvc::SigType, RadioSvc::SigStrengthIndication, RadioSvc::SigStrengthHysteresis>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t>
    > setSignalStrengthReportingCriteriaStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::com::qualcomm::qti::modem::RadioSvcStub,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes::Result, RadioSvc::NetRegState>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t>,
        std::tuple< ::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment_t, ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t>
    > getPacketSwitchedStateStubDispatcher;
    
    RadioSvcSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        RadioSvcSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< RadioSvcStub>(_stub)),
        getRadioSvcInterfaceVersionStubDispatcher(&RadioSvcStub::lockInterfaceVersionAttribute, &RadioSvcStub::getInterfaceVersion, false, true),
        setRadioPowerStubDispatcher(
            &RadioSvcStub::SetRadioPower,
            false,
            _stub->hasElement(0),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, &::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment))
        
        ,
        getRadioPowerStubDispatcher(
            &RadioSvcStub::GetRadioPower,
            false,
            _stub->hasElement(1),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, &::v0::com::qualcomm::qti::modem::CommonTypes_::OnOffTypeDeployment))
        
        ,
        getSignalStrengthStubDispatcher(
            &RadioSvcStub::GetSignalStrength,
            false,
            _stub->hasElement(2),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr)),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SignalMetricsDeployment_t* >(nullptr)))
        
        ,
        getRegisterModeStubDispatcher(
            &RadioSvcStub::GetRegisterMode,
            false,
            _stub->hasElement(3),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::EmptyDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        setAutomaticRegisterModeStubDispatcher(
            &RadioSvcStub::SetAutomaticRegisterMode,
            false,
            _stub->hasElement(4),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment))
        
        ,
        getHardwareConfigStubDispatcher(
            &RadioSvcStub::GetHardwareConfig,
            false,
            _stub->hasElement(5),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)))
        
        ,
        getRatPreferencesStubDispatcher(
            &RadioSvcStub::GetRatPreferences,
            false,
            _stub->hasElement(6),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)))
        
        ,
        getCurrentNetworkNameStubDispatcher(
            &RadioSvcStub::GetCurrentNetworkName,
            false,
            _stub->hasElement(7),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        getNetRegStateStubDispatcher(
            &RadioSvcStub::GetNetRegState,
            false,
            _stub->hasElement(8),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t* >(nullptr)))
        
        ,
        getNrDualConnectivityStatusStubDispatcher(
            &RadioSvcStub::GetNrDualConnectivityStatus,
            false,
            _stub->hasElement(9),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NRDcnrRestrictionDeployment_t* >(nullptr)))
        
        ,
        setSignalStrengthReportingCriteriaStubDispatcher(
            &RadioSvcStub::SetSignalStrengthReportingCriteria,
            false,
            _stub->hasElement(10),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigTypeDeployment_t* >(nullptr), static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthIndicationDeployment_t* >(nullptr), static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::SigStrengthHysteresisDeployment_t* >(nullptr)),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment))
        
        ,
        getPacketSwitchedStateStubDispatcher(
            &RadioSvcStub::GetPacketSwitchedState,
            false,
            _stub->hasElement(11),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment),
            std::make_tuple(&::v0::com::qualcomm::qti::modem::CommonTypes_::ResultDeployment, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::NetRegStateDeployment_t* >(nullptr)))
        
    {
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1001) }, &setRadioPowerStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1002) }, &getRadioPowerStubDispatcher );
        /*
         * description: 
         * Get signal strength of the Radio
         */
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1003) }, &getSignalStrengthStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1004) }, &getRegisterModeStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1005) }, &setAutomaticRegisterModeStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1006) }, &getHardwareConfigStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1007) }, &getRatPreferencesStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1008) }, &getCurrentNetworkNameStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1009) }, &getNetRegStateStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x100a) }, &getNrDualConnectivityStatusStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x100b) }, &setSignalStrengthReportingCriteriaStubDispatcher );
        RadioSvcSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x100c) }, &getPacketSwitchedStateStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x9000));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9001), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x9000));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9002), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x9000));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9003), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x9000));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x9004), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSignalStrengthEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat, const int32_t &_ss, const int32_t &_rsrp) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deployed_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deployed_rat(_rat, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deployed_ss(_ss, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deployed_rsrp(_rsrp, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t > 
    ,  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t > 
    ,  CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > 
    ,  CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9001),
            false,
             deployed_phoneId 
            ,  deployed_rat 
            ,  deployed_ss 
            ,  deployed_rsrp 
    );
}

template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRadioRatEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deployed_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t> deployed_rat(_rat, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t > 
    ,  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::Rat, ::v0::com::qualcomm::qti::modem::RadioSvc_::RatDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9002),
            false,
             deployed_phoneId 
            ,  deployed_rat 
    );
}

template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRadioStateEvent(const ::v0::com::qualcomm::qti::modem::RadioSvc::States &_radioState) {
    CommonAPI::Deployable< RadioSvc::States, ::v0::com::qualcomm::qti::modem::RadioSvc_::StatesDeployment_t> deployed_radioState(_radioState, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::StatesDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::States, ::v0::com::qualcomm::qti::modem::RadioSvc_::StatesDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9003),
            false,
             deployed_radioState 
    );
}

template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCellInfoEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus &_status) {
    CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t> deployed_phoneId(_phoneId, &::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment);
    CommonAPI::Deployable< RadioSvc::CellInfoStatus, ::v0::com::qualcomm::qti::modem::RadioSvc_::CellInfoStatusDeployment_t> deployed_status(_status, static_cast< ::v0::com::qualcomm::qti::modem::RadioSvc_::CellInfoStatusDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId, ::v0::com::qualcomm::qti::modem::CommonTypes_::PhoneIdDeployment_t > 
    ,  CommonAPI::Deployable< ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus, ::v0::com::qualcomm::qti::modem::RadioSvc_::CellInfoStatusDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x9004),
            false,
             deployed_phoneId 
            ,  deployed_status 
    );
}


template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v0::com::qualcomm::qti::modem::RadioSvcStub, typename... _Stubs>
class RadioSvcSomeIPStubAdapter
    : public RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    RadioSvcSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          RadioSvcSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0

#endif // V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_SOMEIP_STUB_ADAPTER_HPP_
