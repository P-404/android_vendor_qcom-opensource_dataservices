/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_HPP_

#include <functional>
#include <sstream>



#include <v0/com/qualcomm/qti/modem/CommonTypes.hpp>

#include <v0/com/qualcomm/qti/modem/RadioSvc.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service RadioSvc. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RadioSvcStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual RadioSvc {
 public:
    /**
    * Sends a broadcast event for SignalStrength. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireSignalStrengthEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat, const int32_t &_ss, const int32_t &_rsrp) = 0;
    /**
    * Sends a broadcast event for RadioRat. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireRadioRatEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat) = 0;
    /**
    * Sends a broadcast event for RadioState. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireRadioStateEvent(const ::v0::com::qualcomm::qti::modem::RadioSvc::States &_radioState) = 0;
    /**
    * Sends a broadcast event for CellInfo. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireCellInfoEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus &_status) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for RadioSvc.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RadioSvcStubRemoteEvent
{
public:
    virtual ~RadioSvcStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service RadioSvc to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RadioSvcStub
    : public virtual CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error)> SetRadioPowerReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power)> GetRadioPowerReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, RadioSvc::SignalMetrics _signalStrength)> GetSignalStrengthReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, bool _isManual, std::string _mcc, std::string _mnc)> GetRegisterModeReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error)> SetAutomaticRegisterModeReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, uint8_t _totalSimCount, uint8_t _maxActiveSims, RadioSvc::RatBitMask _deviceRatCapMask, RadioSvc::RatBitMask _simRatCapMask)> GetHardwareConfigReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, RadioSvc::RatBitMask _ratMask)> GetRatPreferencesReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, std::string _longName, std::string _shortName)> GetCurrentNetworkNameReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, RadioSvc::Rat _rat, uint32_t _cellId, std::string _mcc, std::string _mnc, RadioSvc::NetRegState _netReg)> GetNetRegStateReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error, RadioSvc::NRDcnrRestriction _statusDcnr)> GetNrDualConnectivityStatusReply_t;
    typedef std::function<void (::v0::com::qualcomm::qti::modem::CommonTypes::Result _error)> SetSignalStrengthReportingCriteriaReply_t;

    virtual ~RadioSvcStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 22);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /*
     * description: 
     * Set power state of the Radio
     */
    /// This is the method that will be called on remote calls on the method SetRadioPower.
    virtual void SetRadioPower(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, ::v0::com::qualcomm::qti::modem::CommonTypes::OnOffType _power, SetRadioPowerReply_t _reply) = 0;
    /*
     * description: 
     * Get power state of the Radio
     */
    /// This is the method that will be called on remote calls on the method GetRadioPower.
    virtual void GetRadioPower(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRadioPowerReply_t _reply) = 0;
    /*
     * description: 
     * Get signal strength of the Radio
     */
    /// This is the method that will be called on remote calls on the method GetSignalStrength.
    virtual void GetSignalStrength(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::Rat _rat, GetSignalStrengthReply_t _reply) = 0;
    /*
     * description: 
     * Get the network registration mode
     */
    /// This is the method that will be called on remote calls on the method GetRegisterMode.
    virtual void GetRegisterMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRegisterModeReply_t _reply) = 0;
    /*
     * description: 
     * Registers to network using automatic mode
     */
    /// This is the method that will be called on remote calls on the method SetAutomaticRegisterMode.
    virtual void SetAutomaticRegisterMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, SetAutomaticRegisterModeReply_t _reply) = 0;
    /*
     * description: 
     * Gets SIM maximum counts and RAT capabilities
     */
    /// This is the method that will be called on remote calls on the method GetHardwareConfig.
    virtual void GetHardwareConfig(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetHardwareConfigReply_t _reply) = 0;
    /*
     * description: 
     * Gets the RAT preferences
     */
    /// This is the method that will be called on remote calls on the method GetRatPreferences.
    virtual void GetRatPreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetRatPreferencesReply_t _reply) = 0;
    /*
     * description: 
     * Gets the long name and short name of the network
     */
    /// This is the method that will be called on remote calls on the method GetCurrentNetworkName.
    virtual void GetCurrentNetworkName(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetCurrentNetworkNameReply_t _reply) = 0;
    /*
     * description: 
     * Gets the current registration state
     */
    /// This is the method that will be called on remote calls on the method GetNetRegState.
    virtual void GetNetRegState(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetNetRegStateReply_t _reply) = 0;
    /*
     * description: 
     * Gets the DCNR and ENDC mode status
     */
    /// This is the method that will be called on remote calls on the method GetNrDualConnectivityStatus.
    virtual void GetNrDualConnectivityStatus(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, GetNrDualConnectivityStatusReply_t _reply) = 0;
    /*
     * description: 
     * Sets signal reporting criteria.
     */
    /// This is the method that will be called on remote calls on the method SetSignalStrengthReportingCriteria.
    virtual void SetSignalStrengthReportingCriteria(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId _phoneId, RadioSvc::SigType _sigType, RadioSvc::SigStrengthIndication _ind, RadioSvc::SigStrengthHysteresis _hyst, SetSignalStrengthReportingCriteriaReply_t _reply) = 0;
    /*
     * description: 
     * Event to report signal strength change
     */
    /// Sends a broadcast event for SignalStrength.
    virtual void fireSignalStrengthEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat, const int32_t &_ss, const int32_t &_rsrp) {
        auto stubAdapter = CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireSignalStrengthEvent(_phoneId, _rat, _ss, _rsrp);
    }
    /*
     * description: 
     * Event to report RAT change
     */
    /// Sends a broadcast event for RadioRat.
    virtual void fireRadioRatEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::Rat &_rat) {
        auto stubAdapter = CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRadioRatEvent(_phoneId, _rat);
    }
    /*
     * description: 
     * Event to radio state change
     */
    /// Sends a broadcast event for RadioState.
    virtual void fireRadioStateEvent(const ::v0::com::qualcomm::qti::modem::RadioSvc::States &_radioState) {
        auto stubAdapter = CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireRadioStateEvent(_radioState);
    }
    /*
     * description: 
     * Event to report cell info change
     */
    /// Sends a broadcast event for CellInfo.
    virtual void fireCellInfoEvent(const ::v0::com::qualcomm::qti::modem::CommonTypes::PhoneId &_phoneId, const ::v0::com::qualcomm::qti::modem::RadioSvc::CellInfoStatus &_status) {
        auto stubAdapter = CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireCellInfoEvent(_phoneId, _status);
    }


    using CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<RadioSvcStubAdapter, RadioSvcStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef RadioSvcStubRemoteEvent RemoteEventType;
    typedef RadioSvc StubInterface;
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_Radio_Svc_STUB_HPP_
