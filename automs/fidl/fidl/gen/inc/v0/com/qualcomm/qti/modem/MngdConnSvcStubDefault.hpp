/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_Mngd_Conn_Svc_STUB_DEFAULT_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_Mngd_Conn_Svc_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/com/qualcomm/qti/modem/MngdConnSvcStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

/**
 * Provides a default implementation for MngdConnSvcStubRemoteEvent and
 * MngdConnSvcStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT MngdConnSvcStubDefault
    : public virtual MngdConnSvcStub {
public:
    COMMONAPI_EXPORT MngdConnSvcStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(MngdConnSvc::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT MngdConnSvcStubRemoteEvent* initStubAdapter(const std::shared_ptr< MngdConnSvcStubAdapter> &_adapter) {
        CommonAPI::Stub<MngdConnSvcStubAdapter, MngdConnSvcStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    /*
     * description: 
     * Starts a data session for the given data name.
     */
    COMMONAPI_EXPORT virtual void StartData(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, StartDataReply_t _reply) {
        (void)_client;
        (void)_name;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _reply(error);
    }
    /*
     * description: 
     * Stops a data cellular session for the given name.
     */
    COMMONAPI_EXPORT virtual void StopData(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, StopDataReply_t _reply) {
        (void)_client;
        (void)_name;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        _reply(error);
    }
    /*
     * description: 
     * Gets connection state information for all currently running datas.
     */
    COMMONAPI_EXPORT virtual void GetDataList(const std::shared_ptr<CommonAPI::ClientId> _client, GetDataListReply_t _reply) {
        (void)_client;
        ::v0::com::qualcomm::qti::modem::CommonTypes::Result error;
        uint8_t dataNum = 0u;
        std::vector< std::string > name = {};
        std::vector< MngdConnSvc::DataState > dataState = {};
        _reply(error, dataNum, name, dataState);
    }
    /*
     * description: 
     * Events to report data state.
     */
    COMMONAPI_EXPORT virtual void fireDataStateEvent(const std::string &_name, const ::v0::com::qualcomm::qti::modem::MngdConnSvc::DataState &_dataState) {
        if (!_dataState.validate()) {
            return;
        }
        MngdConnSvcStub::fireDataStateEvent(_name, _dataState);
    }


protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual MngdConnSvcStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(MngdConnSvcStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }


    private:
        MngdConnSvcStubDefault *defaultStub_;
    };
protected:
    MngdConnSvcStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_Mngd_Conn_Svc_STUB_DEFAULT
