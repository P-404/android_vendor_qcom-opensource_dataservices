/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_MODEM_MNGD_CONN_SVC_HPP_
#define V0_COM_QUALCOMM_QTI_MODEM_MNGD_CONN_SVC_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace modem {

class MngdConnSvc {
public:
    virtual ~MngdConnSvc() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct DataState : CommonAPI::Enumeration< uint32_t> {
        enum Literal : uint32_t {
            DATA_DISCONNECTED = 0,
            DATA_CONNECTED = 1,
            DATA_CONNECTION_FAILED = 2,
            DATA_CONNECTION_STALLED = 3
        };
    
        DataState()
            : CommonAPI::Enumeration< uint32_t>(static_cast< uint32_t>(Literal::DATA_DISCONNECTED)) {}
        DataState(Literal _literal)
            : CommonAPI::Enumeration< uint32_t>(static_cast< uint32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint32_t>(Literal::DATA_DISCONNECTED):
                case static_cast< uint32_t>(Literal::DATA_CONNECTED):
                case static_cast< uint32_t>(Literal::DATA_CONNECTION_FAILED):
                case static_cast< uint32_t>(Literal::DATA_CONNECTION_STALLED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DataState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DataState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DataState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DataState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DataState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DataState &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint32_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint32_t>(Literal::DATA_DISCONNECTED): return "DATA_DISCONNECTED";
            case static_cast< uint32_t>(Literal::DATA_CONNECTED): return "DATA_CONNECTED";
            case static_cast< uint32_t>(Literal::DATA_CONNECTION_FAILED): return "DATA_CONNECTION_FAILED";
            case static_cast< uint32_t>(Literal::DATA_CONNECTION_STALLED): return "DATA_CONNECTION_STALLED";
            default: return "UNDEFINED";
            }
        }
    };
    const uint8_t MAX_DATA_NUM = 4;
};

const char* MngdConnSvc::getInterface() {
    return ("com.qualcomm.qti.modem.MngdConnSvc:v0_1");
}

CommonAPI::Version MngdConnSvc::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}

/*
 * description: 
 * The data state.
 */

} // namespace modem
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_QUALCOMM_QTI_MODEM_MNGD_CONN_SVC_HPP_
