/*
* Copyright (c) 2023-2024 Qualcomm Innovation Center, Inc. All rights reserved.
* SPDX-License-Identifier: BSD-3-Clause-Clear
*/

package com.qualcomm.qti.modem
import com.qualcomm.qti.modem.CommonTypes.* from "../common/CommonTypes.fidl"

interface RadioSvc
{
    version { major 0 minor 1 }

    <** @description: RAT bitmask **>
    typedef RatBitMask is UInt32
    const UInt32 RAT_BIT_MASK_GSM = 0x1         /// GSM bitmask.
    const UInt32 RAT_BIT_MASK_UMTS = 0x2        /// UMTS bitmask.
    const UInt32 RAT_BIT_MASK_CDMA = 0x4        /// CDMA bitmask.
    const UInt32 RAT_BIT_MASK_TDSCDMA = 0x8     /// TDSCDMA bitmask.
    const UInt32 RAT_BIT_MASK_LTE = 0x10        /// LTE bitmask.
    const UInt32 RAT_BIT_MASK_NR5G = 0x20       /// NR5G bitmask.
    const UInt32 RAT_BIT_MASK_ALL = 0x40        /// All RAT bitmask.

    <** @description: Type to represent different RATs supported by the system **>
    enumeration Rat
    {
        RAT_UNKNOWN ///< Unknown RAT.
        RAT_GSM     ///< GSM - Global System for Mobile communications.
        RAT_GPRS    ///< GSM GPRS - General Packet Radio Service.
        RAT_EDGE    ///< GSM EDGE - Enhanced Data rate for GSM Evolution.
        RAT_EHRPD   ///< CDMA EHRPD - Evolved High Rate Package Data.
        RAT_UMTS    ///< UMTS - Universal Mobile Telecommunications System.
        RAT_HSPA    ///< UMTS HSPA - High Speed Packet Access.
        RAT_HSDPA   ///< UMTS HSDPA - High Speed Downlink Packet Access.
        RAT_HSUPA   ///< UMTS HSUPA - High Speed Uplink Packet Access.
        RAT_HSPAP   ///< UMTS HSPAP - HSPA+.
        RAT_TDSCDMA ///< TDSCDMA - Time Division-Synchronous Code Division Multiple Access.
        RAT_LTE     ///< LTE - Long Term Evolution.
        RAT_LTE_CA  ///< LTE CA - LTE Carrier Aggregation.
        RAT_NR5G    ///< NR5G - New Radio 5G.
    }

    <** @description: Network registration state **>
    enumeration NetRegState
    {
        NET_REG_STATE_NONE                      ///< Not registered and not searching.
        NET_REG_STATE_HOME                      ///< Home registered.
        NET_REG_STATE_SEARCHING                 ///< Not registered and searching.
        NET_REG_STATE_DENIED                    ///< Registration denied.
        NET_REG_STATE_ROAMING                   ///< Roaming registered.
        NET_REG_STATE_UNKNOWN                   ///< Unknown registration state.
        NET_REG_STATE_EMERGENCY_AVAILABLE       ///< Not registered and not searching,
    }

    <** @description: DCNR(Dual Connectivity with NR) Restriction status on 5G NR **>
    enumeration NRDcnrRestriction
    {
        NR_DCNR_UNKNOWN         ///< NR DCNR Status unknown.
        NR_DCNR_RESTRICTED      ///< NR DCNR is Restricted
        NR_DCNR_UNRESTRICTED    ///< NR DCNR is not Restricted
    }

    <** @description: Radio status enum **>
    enumeration States
    {
        OFF             ///< Radio explictly powered off
        UNAVAILABLE     ///< Radio unavailable
        ON              ///< Radio is on
    }

    <** @description: Cell Info change status enum **>
    enumeration CellInfoStatus
    {
        CELL_SERVING_CHANGED                    ///< Serving Cell info changed.
        CELL_NEIGHBOR_CHANGED                   ///< NeighborCells info changed.
        CELL_SERVING_AND_NEIGHBOR_CHANGED       ///< Serving and neighbor changed.
    }

    <** @description: Signal type enum **>
    enumeration SigType
    {
        SIG_TYPE_GSM_RSSI           ///< GSM Received Signal Strength Indicator.
        SIG_TYPE_UMTS_RSSI          ///< UMTS Received Signal Strength Indicator.
        SIG_TYPE_LTE_RSRP           ///< LTE Reference Signal Receiving Power.
        SIG_TYPE_NR5G_RSRP          ///< NR5G Reference Signal Receiving Power.
    }

    <** @description: Signal strength indication type enum **>
    enumeration SigIndicationType
    {
        SIG_THRESHOLD       ///< Report signal strength based on threshold.
        SIG_DELTA           ///< Report signal strength based on delta.
    }

    <** @description: GSM signal metrics. **>
    struct GsmSignalMetrics
    {
        Int32 rssi      ///< Received signal strength indicator in dBm.
        UInt32 ber      ///< Bit error rate, valid from 0 to 7.
    }

    <** @description: Umts signal metrics. **>
    struct UmtsSignalMetrics
    {
        Int32 ss        ///< Signal strength in dBm.
        UInt32 ber      ///< WCDMA bit error rate, valid from 0 to 7, 0x7FFFFFFF is unavailable.
        Int32 rscp      ///< Receive signal channel power in dBm.
    }

    <** @description: Lte signal metrics. **>
    struct LteSignalMetrics
    {
        Int32 ss        ///< Signal strength in dBm.
        Int32 rsrq      ///< Reference signal receive quality in dB.
        Int32 rsrp      ///< Reference signal receive power in dBm.
        Int32 snr       ///< Signal-to-noise ratio in units of 0.1 dB.
    }

    <** @description: Nr5g signal metrics. **>
    struct Nr5gSignalMetrics
    {
        Int32 rsrq      ///< Reference Signal Receive Quality in dB.
        Int32 rsrp      ///< Reference Signal Receive Power in dBm.
        Int32 snr       ///< Signal-to-Noise Ratio in units of 0.1 dB.
    }

    <** @description: Signal strength indication structure. **>
    struct SigStrengthIndication
    {
        SigIndicationType type          ///< Use threshold or delta as the indication.
        Int32 lowerRange                ///< Lower range threshold in 0.1 dBm.
        Int32 upperRange                ///< Upper range threshold in 0.1 dBm.
        UInt16 delta                    ///< Delta in uints of 0.1 dBm.
    }

    <** @description: Signal strength reporting hysteresis structure. **>
    struct SigStrengthHysteresis
    {
        Boolean setThreshold        ///< True if set a hysteresis threshold, false if not.
        UInt16 threshold            ///< Hysteresis dBm in units of 0.1 dBm, only to specify rat.
        Boolean setTimer            ///< True if set a hysteresis timer, false if not.
        UInt16 timer                ///< Hysteresis time in milliseconds, to all RATs.
    }

    <** @description: Signal metrics for each rat **>
    union SignalMetrics
    {
        GsmSignalMetrics gsm        ///< GSM signal metrics.
        UmtsSignalMetrics umts      ///< Umts signal metrics.
        LteSignalMetrics lte        ///< Lte signal metrics.
        Nr5gSignalMetrics nr5g      ///< Nr5g signal metrics.
    }

    <** @description: Set power state of the Radio **>
    method SetRadioPower
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
            OnOffType power     ///< Power state.
        }
        error Result            ///< return result.
    }

    <** @description: Get power state of the Radio **>
    method GetRadioPower
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        out
        {
            OnOffType power     ///< Power state.
        }
        error Result            ///< return result.
    }

    <** @description: Get signal strength of the Radio **>
    method GetSignalStrength
    {
        in
        {
            PhoneId phoneId                 ///< Phone ID.
            Rat rat                         ///< Radio Access Technology.
        }
        out
        {
            SignalMetrics signalStrength    ///< Signal metrics for the current rat.
        }
        error Result                        ///< return result.
    }

    <** @description: Get the network registration mode **>
    method GetRegisterMode
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        out
        {
            Boolean isManual    ///< True if manual, false if automatic.
            String mcc          ///< MCC.
            String mnc          ///< MNC.

        }
        error Result            ///< return result.
    }

    <** @description: Registers to network using automatic mode **>
    method SetAutomaticRegisterMode
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        error Result            ///< return result.
    }

    <** @description: Gets SIM maximum counts and RAT capabilities **>
    method GetHardwareConfig
    {
        in
        {
            PhoneId phoneId                 ///< Phone ID.
        }
        out
        {
            UInt8 totalSimCount             ///< The max number of sims supported simultaneously.
            UInt8 maxActiveSims             ///< The max number of sims that can be active
                                            /// simultaneously.
            RatBitMask deviceRatCapMask     ///< Device rat capability bitmask.
            RatBitMask simRatCapMask        ///< Sim rat capability bitmask.
        }
        error Result                        ///< return result.
    }

    <** @description: Gets the RAT preferences **>
    method GetRatPreferences
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        out
        {
            RatBitMask ratMask  ///< Bitmask for RAT prefences.
        }
        error Result            ///< return result.
    }

    <** @description: Gets the long name and short name of the network **>
    method GetCurrentNetworkName
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        out
        {
            String longName     ///< Current network's long name.
            String shortName    ///< Current network's short name.
        }
        error Result            ///< return result.
    }

    <** @description: Gets the current registration state **>
    method GetNetRegState
    {
        in
        {
            PhoneId phoneId     ///< Phone ID.
        }
        out
        {
            Rat rat             ///< RAT in use.
            UInt32 cellId       ///< Cell ID.
            String mcc          ///< The mobile country code.
            String mnc          ///< The mobile network code.
            NetRegState netReg  ///< Network registration state.
        }
        error Result            ///< return result.
    }

    <** @description: Gets the DCNR and ENDC mode status **>
    method GetNrDualConnectivityStatus
    {
        in
        {
            PhoneId phoneId                 ///< Phone ID.
        }
        out
        {
            NRDcnrRestriction statusDcnr    ///< DCNR restriction status.
        }
        error Result                        ///< return result.
    }

    <** @description: Sets signal reporting criteria. **>
    method SetSignalStrengthReportingCriteria
    {
        in
        {
            PhoneId phoneId                 ///< Phone ID.
            SigType sigType                 ///< Signal type.
            SigStrengthIndication ind       ///< Signal strength indication.
            SigStrengthHysteresis hyst      ///< Signal strength hysteresis.
        }
        error Result                    ///< return result.
    }

    <** @description: Event to report signal strength change  **>
    broadcast SignalStrength
    {
        out
        {
            PhoneId phoneId     ///< Phone ID.
            Rat rat             ///< Radio Access Technology.
            Int32 ss            ///< Signal strength in dBm.
            Int32 rsrp          ///< Reference signal receive power in dBm.
        }
    }

    <** @description: Event to report RAT change  **>
    broadcast RadioRat
    {
        out
        {
            PhoneId phoneId     ///< Phone ID.
            Rat rat             ///< Radio Access Technology.
        }
    }

    <** @description: Event to radio state change  **>
    broadcast RadioState
    {
        out
        {
            States radioState   ///< Radio state.
        }
    }

    <** @description: Event to report cell info change  **>
    broadcast CellInfo
    {
        out
        {
            PhoneId phoneId         ///< Phone ID.
            CellInfoStatus status   ///< Cell change enum for serving / neighbor / both.
        }
    }
}
